class HtmlProvider : FDR.BaseTypes.HtmlDocument
    new : () -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "wimbledon_wikipedia.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> HtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "wimbledon_wikipedia.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> HtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "wimbledon_wikipedia.html")))

    member Lists: HtmlProvider+ListsContainer with get
    this

    static member Load: stream:System.IO.Stream -> HtmlProvider
    HtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    HtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    HtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TablesContainer with get
    this


class HtmlProvider+ListsContainer : FDR.BaseTypes.HtmlDocument
    member Champions: HtmlProvider+Champions with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Champions")

    member ``Colours and uniforms``: HtmlProvider+ColoursAndUniforms with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Colours and uniforms")

    member Contents: HtmlProvider+Contents with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Contents")

    member ``Current champions``: HtmlProvider+CurrentChampions2 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Current champions")

    member ``External links``: HtmlProvider+ExternalLinks with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "External links")

    member ``Further reading``: HtmlProvider+FurtherReading with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Further reading")

    member Interaction: HtmlProvider+Interaction with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Interaction")

    member ``Invitation events``: HtmlProvider+InvitationEvents with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Invitation events")

    member ``Junior events``: HtmlProvider+JuniorEvents with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Junior events")

    member Languages: HtmlProvider+Languages with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages")

    member Languages2: HtmlProvider+Languages2 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages2")

    member Languages3: HtmlProvider+Languages3 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages3")

    member Languages4: HtmlProvider+Languages4 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages4")

    member List1: HtmlProvider+List1 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List1")

    member List15: HtmlProvider+List15 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List15")

    member List16: HtmlProvider+List16 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List16")

    member List17: HtmlProvider+List17 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List17")

    member List18: HtmlProvider+List18 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List18")

    member List19: HtmlProvider+List19 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List19")

    member List20: HtmlProvider+List20 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List20")

    member List21: HtmlProvider+List21 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List21")

    member List22: HtmlProvider+List22 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List22")

    member List23: HtmlProvider+List23 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List23")

    member List24: HtmlProvider+List24 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List24")

    member List25: HtmlProvider+List25 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List25")

    member List26: HtmlProvider+List26 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List26")

    member List27: HtmlProvider+List27 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List27")

    member List28: HtmlProvider+List28 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List28")

    member List29: HtmlProvider+List29 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List29")

    member List30: HtmlProvider+List30 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List30")

    member List31: HtmlProvider+List31 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List31")

    member List32: HtmlProvider+List32 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List32")

    member List33: HtmlProvider+List33 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List33")

    member List34: HtmlProvider+List34 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List34")

    member List35: HtmlProvider+List35 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List35")

    member List36: HtmlProvider+List36 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List36")

    member List37: HtmlProvider+List37 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List37")

    member List38: HtmlProvider+List38 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List38")

    member List39: HtmlProvider+List39 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List39")

    member List40: HtmlProvider+List40 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List40")

    member List41: HtmlProvider+List41 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List41")

    member List42: HtmlProvider+List42 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List42")

    member List43: HtmlProvider+List43 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List43")

    member List44: HtmlProvider+List44 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List44")

    member ``Main events``: HtmlProvider+MainEvents with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Main events")

    member Namespaces: HtmlProvider+Namespaces with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Namespaces")

    member Navigation: HtmlProvider+Navigation with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Navigation")

    member Notes: HtmlProvider+Notes with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Notes")

    member ``Personal tools``: HtmlProvider+PersonalTools with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Personal tools")

    member Print/export: HtmlProvider+PrintExport with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Print/export")

    member References: HtmlProvider+References with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "References")

    member ``See also``: HtmlProvider+SeeAlso2 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "See also")

    member ``Singles champions never World No. 1``: HtmlProvider+SinglesChampionsNeverWorldNo1 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Singles champions never World No. 1")

    member Tools: HtmlProvider+Tools with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Tools")

    member Views: HtmlProvider+Views with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Views")


class HtmlProvider+TablesContainer : FDR.BaseTypes.HtmlDocument
    member ``Current champions``: HtmlProvider+CurrentChampions with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Event", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Champion", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Runner-up", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Score", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Current champions", true)

    member ``Ranking points``: HtmlProvider+RankingPoints with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("ATP", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("WTA", TextRuntime.ConvertInteger("", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Ranking points", true)

    member Records: HtmlProvider+Records with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Record", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Era", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Player(s)", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Count", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Winning years", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Records", true)

    member ``See also``: HtmlProvider+SeeAlso with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "See also", false)

    member Table1: HtmlProvider+Table1 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("The Championships, Wimbledon", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("The Championships, Wimbledon 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table1", true)

    member Table10: HtmlProvider+Table10 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Wimbledon (Amateur Era)", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table10", true)

    member Table22: HtmlProvider+Table22 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Wimbledon (Open Era)", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table22", true)

    member Table30: HtmlProvider+Table30 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Wimbledon drawsheets", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table30", true)

    member Table31: HtmlProvider+Table31 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Column3", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertInteger("", value), value),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[4]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[5]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[6]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[7]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[8]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[9]))))
    HtmlTable<_>.Create(rowConverter, this, "Table31", true)

    member Table32: HtmlProvider+Table32 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Column3", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertInteger("", value), value),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[4]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[5]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[6]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[7]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[8]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[9]))))
    HtmlTable<_>.Create(rowConverter, this, "Table32", true)

    member Table34: HtmlProvider+Table34 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Grand Slam tournaments (Majors)", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table34", true)

    member Table36: HtmlProvider+Table36 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Tennis", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Tennis2", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Tennis3", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table36", true)

    member Table38: HtmlProvider+Table38 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Grand Slam tournament champions", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table38", true)

    member Table39: HtmlProvider+Table39 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Australasian and Australian Championships / Australian Open", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table39", true)

    member Table40: HtmlProvider+Table40 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("French Championships / French Open", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table40", true)

    member Table41: HtmlProvider+Table41 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("The Championships, Wimbledon", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table41", true)

    member Table42: HtmlProvider+Table42 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("U.S. National Championships / US Open", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table42", true)

    member Table44: HtmlProvider+Table44 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("All England Lawn Tennis and Croquet Club", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("All England Lawn Tennis and Croquet Club 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table44", true)

    member ``Trophies and prize money``: HtmlProvider+TrophiesAndPrizeMoney with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Result", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Prize money", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Increase from 2012", TextRuntime.ConvertInteger("", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Trophies and prize money", true)


class HtmlProvider+Champions : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+ColoursAndUniforms : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Contents : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+CurrentChampions : FDR.BaseTypes.HtmlTable<HtmlProvider+CurrentChampions+Row>

class HtmlProvider+CurrentChampions2 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+ExternalLinks : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+FurtherReading : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Interaction : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+InvitationEvents : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+JuniorEvents : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Languages : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Languages2 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Languages3 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Languages4 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List1 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List15 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List16 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List17 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List18 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List19 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List20 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List21 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List22 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List23 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List24 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List25 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List26 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List27 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List28 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List29 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List30 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List31 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List32 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List33 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List34 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List35 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List36 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List37 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List38 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List39 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List40 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List41 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List42 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List43 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List44 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+MainEvents : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Namespaces : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Navigation : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Notes : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+PersonalTools : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+PrintExport : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+RankingPoints : FDR.BaseTypes.HtmlTable<HtmlProvider+RankingPoints+Row>

class HtmlProvider+Records : FDR.BaseTypes.HtmlTable<HtmlProvider+Records+Row>

class HtmlProvider+References : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+SeeAlso : FDR.BaseTypes.HtmlTable<HtmlProvider+SeeAlso+Row>

class HtmlProvider+SeeAlso2 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+SinglesChampionsNeverWorldNo1 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Table1 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table1+Row>

class HtmlProvider+Table10 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table10+Row>

class HtmlProvider+Table22 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table22+Row>

class HtmlProvider+Table30 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table30+Row>

class HtmlProvider+Table31 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table31+Row>

class HtmlProvider+Table32 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table32+Row>

class HtmlProvider+Table34 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table34+Row>

class HtmlProvider+Table36 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table36+Row>

class HtmlProvider+Table38 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table38+Row>

class HtmlProvider+Table39 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table39+Row>

class HtmlProvider+Table40 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table40+Row>

class HtmlProvider+Table41 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table41+Row>

class HtmlProvider+Table42 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table42+Row>

class HtmlProvider+Table44 : FDR.BaseTypes.HtmlTable<HtmlProvider+Table44+Row>

class HtmlProvider+Tools : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+TrophiesAndPrizeMoney : FDR.BaseTypes.HtmlTable<HtmlProvider+TrophiesAndPrizeMoney+Row>

class HtmlProvider+Views : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+CurrentChampions+Row : string * string * string * string
    member Champion: string with get
    (let _,t2,_,_ = this in t2)

    member Event: string with get
    (let t1,_,_,_ = this in t1)

    member Runner-up: string with get
    (let _,_,t3,_ = this in t3)

    member Score: string with get
    (let _,_,_,t4 = this in t4)


class HtmlProvider+RankingPoints+Row : string * int * int
    member ATP: int with get
    (let _,t2,_ = this in t2)

    member Column1: string with get
    (let t1,_,_ = this in t1)

    member WTA: int with get
    (let _,_,t3 = this in t3)


class HtmlProvider+Records+Row : string * string * string * string * string
    member Count: string with get
    (let _,_,_,t4,_ = this in t4)

    member Era: string with get
    (let _,t2,_,_,_ = this in t2)

    member Player(s): string with get
    (let _,_,t3,_,_ = this in t3)

    member Record: string with get
    (let t1,_,_,_,_ = this in t1)

    member ``Winning years``: string with get
    (let _,_,_,_,t5 = this in t5)


class HtmlProvider+SeeAlso+Row : string * string
    member Column1: string with get
    (let t1,_ = this in t1)

    member Column2: string with get
    (let _,t2 = this in t2)


class HtmlProvider+Table1+Row : string * string
    member ``The Championships, Wimbledon``: string with get
    (let t1,_ = this in t1)

    member ``The Championships, Wimbledon 2``: string with get
    (let _,t2 = this in t2)


class HtmlProvider+Table10+Row : string
    member ``Wimbledon (Amateur Era)``: string with get
    this


class HtmlProvider+Table22+Row : string
    member ``Wimbledon (Open Era)``: string with get
    this


class HtmlProvider+Table30+Row : string
    member ``Wimbledon drawsheets``: string with get
    this


class HtmlProvider+Table31+Row : int * int * int * int * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int>
    member 1968: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,t9,_ = this in t9)

    member 1969: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,_,t10 = this in t10)

    member Column1: int with get
    (let t1,_,_,_,_,_,_,_,_,_ = this in t1)

    member Column2: int with get
    (let _,t2,_,_,_,_,_,_,_,_ = this in t2)

    member Column3: int with get
    (let _,_,t3,_,_,_,_,_,_,_ = this in t3)

    member Column4: int with get
    (let _,_,_,t4,_,_,_,_,_,_ = this in t4)

    member Column5: System.Nullable<int> with get
    (let _,_,_,_,t5,_,_,_,_,_ = this in t5)

    member Column6: System.Nullable<int> with get
    (let _,_,_,_,_,t6,_,_,_,_ = this in t6)

    member Column7: System.Nullable<int> with get
    (let _,_,_,_,_,_,t7,_,_,_ = this in t7)

    member Column8: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,t8,_,_ = this in t8)


class HtmlProvider+Table32+Row : int * int * int * int * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int>
    member 1968: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,t9,_ = this in t9)

    member 1969: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,_,t10 = this in t10)

    member Column1: int with get
    (let t1,_,_,_,_,_,_,_,_,_ = this in t1)

    member Column2: int with get
    (let _,t2,_,_,_,_,_,_,_,_ = this in t2)

    member Column3: int with get
    (let _,_,t3,_,_,_,_,_,_,_ = this in t3)

    member Column4: int with get
    (let _,_,_,t4,_,_,_,_,_,_ = this in t4)

    member Column5: System.Nullable<int> with get
    (let _,_,_,_,t5,_,_,_,_,_ = this in t5)

    member Column6: System.Nullable<int> with get
    (let _,_,_,_,_,t6,_,_,_,_ = this in t6)

    member Column7: System.Nullable<int> with get
    (let _,_,_,_,_,_,t7,_,_,_ = this in t7)

    member Column8: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,t8,_,_ = this in t8)


class HtmlProvider+Table34+Row : string
    member ``Grand Slam tournaments (Majors)``: string with get
    this


class HtmlProvider+Table36+Row : string * string * string
    member Tennis: string with get
    (let t1,_,_ = this in t1)

    member Tennis2: string with get
    (let _,t2,_ = this in t2)

    member Tennis3: string with get
    (let _,_,t3 = this in t3)


class HtmlProvider+Table38+Row : string
    member ``Grand Slam tournament champions``: string with get
    this


class HtmlProvider+Table39+Row : string
    member ``Australasian and Australian Championships / Australian Open``: string with get
    this


class HtmlProvider+Table40+Row : string
    member ``French Championships / French Open``: string with get
    this


class HtmlProvider+Table41+Row : string
    member ``The Championships, Wimbledon``: string with get
    this


class HtmlProvider+Table42+Row : string
    member ``U.S. National Championships / US Open``: string with get
    this


class HtmlProvider+Table44+Row : string * string
    member ``All England Lawn Tennis and Croquet Club``: string with get
    (let t1,_ = this in t1)

    member ``All England Lawn Tennis and Croquet Club 2``: string with get
    (let _,t2 = this in t2)


class HtmlProvider+TrophiesAndPrizeMoney+Row : string * string * int
    member ``Increase from 2012``: int with get
    (let _,_,t3 = this in t3)

    member ``Prize money``: string with get
    (let _,t2,_ = this in t2)

    member Result: string with get
    (let t1,_,_ = this in t1)


