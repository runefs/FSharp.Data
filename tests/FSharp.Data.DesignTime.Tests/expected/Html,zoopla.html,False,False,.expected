class HtmlProvider : FDR.BaseTypes.HtmlDocument
    new : () -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "zoopla.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> HtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "zoopla.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> HtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "zoopla.html")))

    member Lists: HtmlProvider+ListsContainer with get
    this

    static member Load: stream:System.IO.Stream -> HtmlProvider
    HtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    HtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    HtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TablesContainer with get
    this


class HtmlProvider+ListsContainer : FDR.BaseTypes.HtmlDocument
    member ``1 bedroom property to rent in London``: HtmlProvider+1BedroomPropertyToRentInLondon with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "1 bedroom property to rent in London")

    member Bookmarks-share: HtmlProvider+BookmarksShare with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "bookmarks-share")

    member Featured_listings: HtmlProvider+FeaturedListings with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "featured_listings")

    member Furnishing: HtmlProvider+Furnishing with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Furnishing")

    member ``Letting type``: HtmlProvider+LettingType with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Letting type")

    member List10: HtmlProvider+List10 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List10")

    member List11: HtmlProvider+List11 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List11")

    member List2: HtmlProvider+List2 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List2")

    member List3: HtmlProvider+List3 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List3")

    member List4: HtmlProvider+List4 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List4")

    member List7: HtmlProvider+List7 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List7")

    member List8: HtmlProvider+List8 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List8")

    member List9: HtmlProvider+List9 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List9")

    member ``Marketed by``: HtmlProvider+MarketedBy with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Marketed by")

    member ``Property features``: HtmlProvider+PropertyFeatures with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Property features")

    member ``Property type``: HtmlProvider+PropertyType with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Property type")


class HtmlProvider+TablesContainer : FDR.BaseTypes.HtmlDocument
    member ``Currently available to rent in London``: HtmlProvider+CurrentlyAvailableToRentInLondon with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Type", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("1 bed", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("2 bed", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("3 bed", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("4 bed", TextRuntime.ConvertFloat("", "", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Currently available to rent in London", true)


class HtmlProvider+1BedroomPropertyToRentInLondon : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+BookmarksShare : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+CurrentlyAvailableToRentInLondon : FDR.BaseTypes.HtmlTable<HtmlProvider+CurrentlyAvailableToRentInLondon+Row>

class HtmlProvider+FeaturedListings : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+Furnishing : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+LettingType : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List10 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List11 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List2 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List3 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List4 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List7 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List8 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+List9 : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+MarketedBy : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+PropertyFeatures : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+PropertyType : FDR.BaseTypes.HtmlList<string>

class HtmlProvider+CurrentlyAvailableToRentInLondon+Row : string * int * int * int * float
    member ``1 bed``: int with get
    (let _,t2,_,_,_ = this in t2)

    member ``2 bed``: int with get
    (let _,_,t3,_,_ = this in t3)

    member ``3 bed``: int with get
    (let _,_,_,t4,_ = this in t4)

    member ``4 bed``: float with get
    (let _,_,_,_,t5 = this in t5)

    member Type: string with get
    (let t1,_,_,_,_ = this in t1)


